This file does not comply with any standards in code documenatation and it sonly purpose is to make working with our code a bit easier and save some time

possible main functions
[V,D,p,real_inner_vertices] = get_results_1010();

computes the Eigenvalues with eigs(M,A); Eigenvalues have to be inverted to see the actual frequency
without any changes Dirichlet boundaries on the outer surfaces are used in xyz.
commenting the appropriate section gives access to Dirichlet z or Dirichlet xy

the evaluated Meshs has to have size 10x10x0.5 to meshes are possible:
	-rectangle.msh (comp time ~5sec) Beware that results are substantially worse
	-rectangle_fine.msh(comp time ~4min)

unlocking the comments for the evaluation of boundary conditions gives access to applying
Dirichlet conditions for the outer lines or for one point.

one contour plot is presented for the smallest eigenmode.
__________________________________________________________________

the other modes can be plottet with 
contour_plot( V,real_inner_vertices,p ,k)

where k specifies the kth largest eigenvalue of the computed list.
___________________________________________________________________

In total analogy the function
[V,D,p,real_inner_vertices] = get_results()

can be used for a 100x100x0.5 plate
___________________________________________________________________

contour_plot_100100( V,real_inner_vertices,p ,k);
again gives a view of all the results 


It is possible to switch to tetramesh animation mode by commendting the according section
but this will only work for the coarse 10x10x0.5 plate and will still take some time and
won't give any more information then the contour plots.

The convergence check for the code with an analytical result is left in commented.
___________________________________________________________________
___________________________________________________________________
other functions
[p, Elements] = getMesh_2D(file_name)
loads a msh generated by gmsh and saves it as [p,tetra]

____________________________________________________________________
[rowMap,colMap] = get_node_mapping_matrix(tri)
gives back the mapping to insert the partial Mass and Stiffness matrix into the system matrix
____________________________________________________________________
quadrature3D(p1,p2,p3,p4,Nq,g)
standard gauss quadrature in 3D

Meshes
rectangle.msh 		~5k  Elements 	10	x10	x0.5
rectangle_fine.msh	~80k Elements	10	x10	x0.5
plate_msh_coarser	~80k Elements	100	x100	x0.5